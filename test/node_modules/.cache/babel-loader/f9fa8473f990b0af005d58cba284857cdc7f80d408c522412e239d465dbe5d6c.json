{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ferdd Nando\\\\Downloads\\\\ApexCharts\\\\test\\\\src\\\\CSV_apex.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Papa from 'papaparse';\nimport randomColor from 'randomcolor';\nimport Chart from 'react-apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CSVReader = () => {\n  _s();\n  const [dataForApexCharts, setDataForApexCharts] = useState([]);\n  const [infoData, setInfoData] = useState([]);\n  const [dataColors, setDataColors] = useState({});\n  const [selectedInfo, setSelectedInfo] = useState([]);\n  // const [selectedInfo, setSelectedInfo] = useState('');\n\n  const handleFileChosen = file => {\n    Papa.parse(file, {\n      complete: results => {\n        const infoHeaders = results.meta.fields.filter(header => header !== 'Informação' && header !== 'obs');\n        setInfoData(infoHeaders);\n        const colors = randomColor({\n          count: infoHeaders.length,\n          format: 'rgba',\n          luminosity: 'bright',\n          alpha: 1\n        });\n        const colorsMap = {};\n        infoHeaders.forEach((header, index) => {\n          colorsMap[header] = colors[index];\n        });\n        setDataColors(colorsMap);\n        const formattedData = results.data.map(item => {\n          return {\n            nome: item.Informação,\n            ...Object.fromEntries(infoHeaders.map(header => [header, parseInt(item[header], 10)]))\n          };\n        });\n        setDataForApexCharts(formattedData);\n        setSelectedInfo([formattedData[0].nome]); // Inicializa com o primeiro valor por padrão\n      },\n\n      header: true\n    });\n  };\n  // //ESTA PARA MULTIPLAS ESCOLHAS NECESSARIO MUDAR PARA AS OUTRAS\n  const handleInfoChange = e => {\n    const selectedValues = Array.from(e.target.selectedOptions, option => option.value);\n    setSelectedInfo(selectedValues || []); // Certifique-se de que selectedInfo seja um array\n  };\n\n  useEffect(() => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.csv';\n    input.onchange = e => handleFileChosen(e.target.files[0]);\n    document.body.appendChild(input);\n    return () => {\n      document.body.removeChild(input);\n    };\n  }, []);\n\n  // if (!dataForApexCharts.length || !infoData.length || !dataForApexCharts[0][selectedInfo]) {\n  //   return <div>Loading...</div>;\n  // }\n\n  // // FAZENDO O GRAFICO EM BARRA\n  // const options = {\n  //   xaxis: {\n  //     categories: infoData.filter((header) => header !== 'nome'),\n  //   },\n  //   colors: Object.values(dataColors),\n  // };\n\n  // return (\n  //   <div>\n  //     <h2>Informação Headers:</h2>\n  //     <pre>{infoData.join(', ')}</pre>\n\n  //     {infoData.length > 0 && (\n  //       <select multiple value={selectedInfo} onChange={handleInfoChange}>\n  //         {dataForApexCharts.map((item) => (\n  //           <option key={item.nome} value={item.nome}>\n  //             {item.nome}\n  //           </option>\n  //         ))}\n  //       </select>\n  //     )}\n\n  //     <Chart\n  //       options={options}\n  //       series={selectedInfo.map((info) => ({\n  //         name: info,\n  //         data: infoData\n  //           .filter((header) => header !== 'nome')\n  //           .map((year) => dataForApexCharts.find((item) => item.nome === info)[year]),\n  //       }))}\n  //       type=\"bar\"\n  //       height={350}\n  //     />\n  //   </div>\n  // );\n\n  // // FAZENDO O GRAFICO EM LINHA \n\n  const options = {\n    chart: {\n      height: 350,\n      type: 'line',\n      zoom: {\n        enabled: false\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      curve: 'straight'\n    },\n    title: {\n      text: 'Grafico em Linha',\n      align: 'left'\n    },\n    grid: {\n      row: {\n        colors: ['#f3f3f3', 'transparent'],\n        opacity: 0.5\n      }\n    },\n    xaxis: {\n      categories: infoData.filter(header => header !== 'nome')\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Informa\\xE7\\xE3o Headers:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: infoData.join(', ')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }, this), infoData.length > 0 && /*#__PURE__*/_jsxDEV(\"select\", {\n      multiple: true,\n      value: selectedInfo,\n      onChange: handleInfoChange,\n      children: dataForApexCharts.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: item.nome,\n        children: item.nome\n      }, item.nome, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      options: options,\n      series: selectedInfo.map(info => ({\n        name: info,\n        data: infoData.filter(header => header !== 'nome').map(year => dataForApexCharts.find(item => item.nome === info)[year])\n      })),\n      type: \"line\",\n      height: 350\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 3\n  }, this);\n\n  // ///GRAFICO EM PIZZA\n  // const options = {\n  //   chart: {\n  //     width: 380,\n  //     type: 'pie',\n  //   },\n  //   labels: selectedInfo,\n  //   responsive: [\n  //     {\n  //       breakpoint: 480,\n  //       options: {\n  //         chart: {\n  //           width: 200,\n  //         },\n  //         legend: {\n  //           position: 'bottom',\n  //         },\n  //       },\n  //     },\n  //   ],\n  // };\n\n  // return (\n  //   <div>\n  //     <h2>Informação Headers:</h2>\n  //     <pre>{infoData.join(', ')}</pre>\n\n  //     {infoData.length > 0 && (\n  //       <select multiple value={selectedInfo} onChange={handleInfoChange}>\n  //         {dataForApexCharts.map((item) => (\n  //           <option key={item.nome} value={item.nome}>\n  //             {item.nome}\n  //           </option>\n  //         ))}\n  //       </select>\n  //     )}\n\n  //     <div id=\"chart\">\n  //       <Chart options={options} series={dataForApexCharts} type=\"pie\" width={380} />\n  //     </div>\n  //     <div id=\"html-dist\"></div>\n  //   </div>\n  // );\n};\n_s(CSVReader, \"PJHftedsxLViCzvwN+meWuElOL8=\");\n_c = CSVReader;\nexport default CSVReader;\n\n// import React, { useEffect, useState } from 'react';\n// import Papa from 'papaparse';\n// import randomColor from 'randomcolor';\n// import Chart from 'react-apexcharts';\n\n// const CSVReader = () => {\n//   const [dataForApexCharts, setDataForApexCharts] = useState([]);\n//   const [infoData, setInfoData] = useState([]);\n//   const [dataColors, setDataColors] = useState({});\n//   const [selectedInfo, setSelectedInfo] = useState([]);\n\n//   const handleFileChosen = (file) => {\n//     Papa.parse(file, {\n//       complete: (results) => {\n//         const infoHeaders = results.meta.fields.filter((header) => header !== 'Informação' && header !== 'obs');\n//         setInfoData(infoHeaders);\n\n//         const colors = randomColor({\n//           count: infoHeaders.length,\n//           format: 'rgba',\n//           luminosity: 'bright',\n//           alpha: 1,\n//         });\n\n//         const colorsMap = {};\n//         infoHeaders.forEach((header, index) => {\n//           colorsMap[header] = colors[index];\n//         });\n//         setDataColors(colorsMap);\n\n//         const formattedData = results.data.map((item) => {\n//           return {\n//             nome: item.Informação,\n//             ...Object.fromEntries(infoHeaders.map((header) => [header, parseInt(item[header], 10)])),\n//           };\n//         });\n\n//         setDataForApexCharts(formattedData);\n//         setSelectedInfo([formattedData[0].nome]); // Inicializa com o primeiro valor por padrão\n//       },\n//       header: true,\n//     });\n//   };\n\n//   const handleInfoChange = (e) => {\n//     const selectedValues = Array.from(e.target.selectedOptions, (option) => option.value);\n//     setSelectedInfo(selectedValues || []); // Certifique-se de que selectedInfo seja um array\n//   };\n\n//   useEffect(() => {\n//     const input = document.createElement('input');\n//     input.type = 'file';\n//     input.accept = '.csv';\n//     input.onchange = (e) => handleFileChosen(e.target.files[0]);\n//     document.body.appendChild(input);\n\n//     return () => {\n//       document.body.removeChild(input);\n//     };\n//   }, []);\n\n//   const options = {\n//     series: selectedInfo.map((info) => ({\n//       data: infoData\n//         .filter((header) => header !== 'nome')\n//         .map((year) => dataForApexCharts.find((item) => item.nome === info)[year]),\n//     })),\n//     chart: {\n//       height: 350,\n//       type: 'bar',\n//       events: {\n//         click: function (chart, w, e) {\n//           // console.log(chart, w, e)\n//         },\n//       },\n//     },\n//     colors: Object.values(dataColors),\n//     plotOptions: {\n//       bar: {\n//         columnWidth: '45%',\n//         distributed: true,\n//       },\n//     },\n//     dataLabels: {\n//       enabled: false,\n//     },\n//     legend: {\n//       show: false,\n//     },\n//     xaxis: {\n//       categories: selectedInfo.map((info) => [info]),\n//       labels: {\n//         style: {\n//           colors: Object.values(dataColors),\n//           fontSize: '12px',\n//         },\n//       },\n//     },\n//   };\n\n//   return (\n//     <div>\n//       <h2>Informação Headers:</h2>\n//       <pre>{infoData.join(', ')}</pre>\n\n//       {infoData.length > 0 && (\n//         <select multiple value={selectedInfo} onChange={handleInfoChange}>\n//           {dataForApexCharts.map((item) => (\n//             <option key={item.nome} value={item.nome}>\n//               {item.nome}\n//             </option>\n//           ))}\n//         </select>\n//       )}\n\n//       <Chart options={options} series={options.series} type=\"bar\" height={350} />\n//     </div>\n//   );\n// };\n\n// export default CSVReader;\nvar _c;\n$RefreshReg$(_c, \"CSVReader\");","map":{"version":3,"names":["React","useEffect","useState","Papa","randomColor","Chart","jsxDEV","_jsxDEV","CSVReader","_s","dataForApexCharts","setDataForApexCharts","infoData","setInfoData","dataColors","setDataColors","selectedInfo","setSelectedInfo","handleFileChosen","file","parse","complete","results","infoHeaders","meta","fields","filter","header","colors","count","length","format","luminosity","alpha","colorsMap","forEach","index","formattedData","data","map","item","nome","Informação","Object","fromEntries","parseInt","handleInfoChange","e","selectedValues","Array","from","target","selectedOptions","option","value","input","document","createElement","type","accept","onchange","files","body","appendChild","removeChild","options","chart","height","zoom","enabled","dataLabels","stroke","curve","title","text","align","grid","row","opacity","xaxis","categories","children","fileName","_jsxFileName","lineNumber","columnNumber","join","multiple","onChange","series","info","name","year","find","_c","$RefreshReg$"],"sources":["C:/Users/Ferdd Nando/Downloads/ApexCharts/test/src/CSV_apex.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Papa from 'papaparse';\r\nimport randomColor from 'randomcolor';\r\nimport Chart from 'react-apexcharts';\r\n\r\nconst CSVReader = () => {\r\n  const [dataForApexCharts, setDataForApexCharts] = useState([]);\r\n  const [infoData, setInfoData] = useState([]);\r\n  const [dataColors, setDataColors] = useState({});\r\n  const [selectedInfo, setSelectedInfo] = useState([]);\r\n  // const [selectedInfo, setSelectedInfo] = useState('');\r\n\r\n  const handleFileChosen = (file) => {\r\n    Papa.parse(file, {\r\n      complete: (results) => {\r\n        const infoHeaders = results.meta.fields.filter((header) => header !== 'Informação' && header !== 'obs');\r\n        setInfoData(infoHeaders);\r\n\r\n        const colors = randomColor({\r\n          count: infoHeaders.length,\r\n          format: 'rgba',\r\n          luminosity: 'bright',\r\n          alpha: 1,\r\n        });\r\n\r\n        const colorsMap = {};\r\n        infoHeaders.forEach((header, index) => {\r\n          colorsMap[header] = colors[index];\r\n        });\r\n        setDataColors(colorsMap);\r\n\r\n        const formattedData = results.data.map((item) => {\r\n          return {\r\n            nome: item.Informação,\r\n            ...Object.fromEntries(infoHeaders.map((header) => [header, parseInt(item[header], 10)])),\r\n          };\r\n        });\r\n\r\n        setDataForApexCharts(formattedData);\r\n        setSelectedInfo([formattedData[0].nome]); // Inicializa com o primeiro valor por padrão\r\n      },\r\n      header: true,\r\n    });\r\n  };\r\n// //ESTA PARA MULTIPLAS ESCOLHAS NECESSARIO MUDAR PARA AS OUTRAS\r\n  const handleInfoChange = (e) => {\r\n    const selectedValues = Array.from(e.target.selectedOptions, (option) => option.value);\r\n    setSelectedInfo(selectedValues || []); // Certifique-se de que selectedInfo seja um array\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    const input = document.createElement('input');\r\n    input.type = 'file';\r\n    input.accept = '.csv';\r\n    input.onchange = (e) => handleFileChosen(e.target.files[0]);\r\n    document.body.appendChild(input);\r\n\r\n    return () => {\r\n      document.body.removeChild(input);\r\n    };\r\n  }, []);\r\n\r\n  // if (!dataForApexCharts.length || !infoData.length || !dataForApexCharts[0][selectedInfo]) {\r\n  //   return <div>Loading...</div>;\r\n  // }\r\n\r\n// // FAZENDO O GRAFICO EM BARRA\r\n      // const options = {\r\n      //   xaxis: {\r\n      //     categories: infoData.filter((header) => header !== 'nome'),\r\n      //   },\r\n      //   colors: Object.values(dataColors),\r\n      // };\r\n    \r\n      // return (\r\n      //   <div>\r\n      //     <h2>Informação Headers:</h2>\r\n      //     <pre>{infoData.join(', ')}</pre>\r\n    \r\n      //     {infoData.length > 0 && (\r\n      //       <select multiple value={selectedInfo} onChange={handleInfoChange}>\r\n      //         {dataForApexCharts.map((item) => (\r\n      //           <option key={item.nome} value={item.nome}>\r\n      //             {item.nome}\r\n      //           </option>\r\n      //         ))}\r\n      //       </select>\r\n      //     )}\r\n    \r\n      //     <Chart\r\n      //       options={options}\r\n      //       series={selectedInfo.map((info) => ({\r\n      //         name: info,\r\n      //         data: infoData\r\n      //           .filter((header) => header !== 'nome')\r\n      //           .map((year) => dataForApexCharts.find((item) => item.nome === info)[year]),\r\n      //       }))}\r\n      //       type=\"bar\"\r\n      //       height={350}\r\n      //     />\r\n      //   </div>\r\n      // );\r\n\r\n\r\n// // FAZENDO O GRAFICO EM LINHA \r\n\r\nconst options = {\r\n  chart: {\r\n    height: 350,\r\n    type: 'line',\r\n    zoom: {\r\n      enabled: false,\r\n    },\r\n  },\r\n  dataLabels: {\r\n    enabled: false,\r\n  },\r\n  stroke: {\r\n    curve: 'straight',\r\n  },\r\n  title: {\r\n    text: 'Grafico em Linha',\r\n    align: 'left',\r\n  },\r\n  grid: {\r\n    row: {\r\n      colors: ['#f3f3f3', 'transparent'],\r\n      opacity: 0.5,\r\n    },\r\n  },\r\n  xaxis: {\r\n    categories: infoData.filter((header) => header !== 'nome'),\r\n  },\r\n};\r\n\r\nreturn (\r\n  <div>\r\n    <h2>Informação Headers:</h2>\r\n    <pre>{infoData.join(', ')}</pre>\r\n\r\n    {infoData.length > 0 && (\r\n      <select multiple value={selectedInfo} onChange={handleInfoChange}>\r\n        {dataForApexCharts.map((item) => (\r\n          <option key={item.nome} value={item.nome}>\r\n            {item.nome}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    )}\r\n\r\n    <Chart\r\n      options={options}\r\n      series={selectedInfo.map((info) => ({\r\n        name: info,\r\n        data: infoData.filter((header) => header !== 'nome').map((year) => dataForApexCharts.find((item) => item.nome === info)[year]),\r\n      }))}\r\n      type=\"line\"\r\n      height={350}\r\n    />\r\n  </div>\r\n);\r\n\r\n  \r\n\r\n// ///GRAFICO EM PIZZA\r\n// const options = {\r\n//   chart: {\r\n//     width: 380,\r\n//     type: 'pie',\r\n//   },\r\n//   labels: selectedInfo,\r\n//   responsive: [\r\n//     {\r\n//       breakpoint: 480,\r\n//       options: {\r\n//         chart: {\r\n//           width: 200,\r\n//         },\r\n//         legend: {\r\n//           position: 'bottom',\r\n//         },\r\n//       },\r\n//     },\r\n//   ],\r\n// };\r\n\r\n// return (\r\n//   <div>\r\n//     <h2>Informação Headers:</h2>\r\n//     <pre>{infoData.join(', ')}</pre>\r\n\r\n//     {infoData.length > 0 && (\r\n//       <select multiple value={selectedInfo} onChange={handleInfoChange}>\r\n//         {dataForApexCharts.map((item) => (\r\n//           <option key={item.nome} value={item.nome}>\r\n//             {item.nome}\r\n//           </option>\r\n//         ))}\r\n//       </select>\r\n//     )}\r\n\r\n//     <div id=\"chart\">\r\n//       <Chart options={options} series={dataForApexCharts} type=\"pie\" width={380} />\r\n//     </div>\r\n//     <div id=\"html-dist\"></div>\r\n//   </div>\r\n// );\r\n\r\n};\r\n\r\nexport default CSVReader;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import Papa from 'papaparse';\r\n// import randomColor from 'randomcolor';\r\n// import Chart from 'react-apexcharts';\r\n\r\n// const CSVReader = () => {\r\n//   const [dataForApexCharts, setDataForApexCharts] = useState([]);\r\n//   const [infoData, setInfoData] = useState([]);\r\n//   const [dataColors, setDataColors] = useState({});\r\n//   const [selectedInfo, setSelectedInfo] = useState([]);\r\n\r\n//   const handleFileChosen = (file) => {\r\n//     Papa.parse(file, {\r\n//       complete: (results) => {\r\n//         const infoHeaders = results.meta.fields.filter((header) => header !== 'Informação' && header !== 'obs');\r\n//         setInfoData(infoHeaders);\r\n\r\n//         const colors = randomColor({\r\n//           count: infoHeaders.length,\r\n//           format: 'rgba',\r\n//           luminosity: 'bright',\r\n//           alpha: 1,\r\n//         });\r\n\r\n//         const colorsMap = {};\r\n//         infoHeaders.forEach((header, index) => {\r\n//           colorsMap[header] = colors[index];\r\n//         });\r\n//         setDataColors(colorsMap);\r\n\r\n//         const formattedData = results.data.map((item) => {\r\n//           return {\r\n//             nome: item.Informação,\r\n//             ...Object.fromEntries(infoHeaders.map((header) => [header, parseInt(item[header], 10)])),\r\n//           };\r\n//         });\r\n\r\n//         setDataForApexCharts(formattedData);\r\n//         setSelectedInfo([formattedData[0].nome]); // Inicializa com o primeiro valor por padrão\r\n//       },\r\n//       header: true,\r\n//     });\r\n//   };\r\n\r\n//   const handleInfoChange = (e) => {\r\n//     const selectedValues = Array.from(e.target.selectedOptions, (option) => option.value);\r\n//     setSelectedInfo(selectedValues || []); // Certifique-se de que selectedInfo seja um array\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const input = document.createElement('input');\r\n//     input.type = 'file';\r\n//     input.accept = '.csv';\r\n//     input.onchange = (e) => handleFileChosen(e.target.files[0]);\r\n//     document.body.appendChild(input);\r\n\r\n//     return () => {\r\n//       document.body.removeChild(input);\r\n//     };\r\n//   }, []);\r\n\r\n//   const options = {\r\n//     series: selectedInfo.map((info) => ({\r\n//       data: infoData\r\n//         .filter((header) => header !== 'nome')\r\n//         .map((year) => dataForApexCharts.find((item) => item.nome === info)[year]),\r\n//     })),\r\n//     chart: {\r\n//       height: 350,\r\n//       type: 'bar',\r\n//       events: {\r\n//         click: function (chart, w, e) {\r\n//           // console.log(chart, w, e)\r\n//         },\r\n//       },\r\n//     },\r\n//     colors: Object.values(dataColors),\r\n//     plotOptions: {\r\n//       bar: {\r\n//         columnWidth: '45%',\r\n//         distributed: true,\r\n//       },\r\n//     },\r\n//     dataLabels: {\r\n//       enabled: false,\r\n//     },\r\n//     legend: {\r\n//       show: false,\r\n//     },\r\n//     xaxis: {\r\n//       categories: selectedInfo.map((info) => [info]),\r\n//       labels: {\r\n//         style: {\r\n//           colors: Object.values(dataColors),\r\n//           fontSize: '12px',\r\n//         },\r\n//       },\r\n//     },\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Informação Headers:</h2>\r\n//       <pre>{infoData.join(', ')}</pre>\r\n\r\n//       {infoData.length > 0 && (\r\n//         <select multiple value={selectedInfo} onChange={handleInfoChange}>\r\n//           {dataForApexCharts.map((item) => (\r\n//             <option key={item.nome} value={item.nome}>\r\n//               {item.nome}\r\n//             </option>\r\n//           ))}\r\n//         </select>\r\n//       )}\r\n\r\n//       <Chart options={options} series={options.series} type=\"bar\" height={350} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CSVReader;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}